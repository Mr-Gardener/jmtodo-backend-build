{"version":3,"sources":["../../../src/transports/sparkpost.ts"],"sourcesContent":["/*\n * @adonisjs/mail\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport got from 'got'\nimport { text } from 'node:stream/consumers'\nimport { ObjectBuilder } from '@poppinss/utils'\nimport { type Transport, createTransport } from 'nodemailer'\nimport MailMessage from 'nodemailer/lib/mailer/mail-message.js'\n\nimport debug from '../debug.js'\nimport { MailResponse } from '../mail_response.js'\nimport { E_MAIL_TRANSPORT_ERROR } from '../errors.js'\nimport type {\n  SparkPostConfig,\n  NodeMailerMessage,\n  MailTransportContract,\n  SparkPostRuntimeConfig,\n  SparkPostSentMessageInfo,\n} from '../types.js'\n\n/**\n * Transport for nodemailer.\n */\nclass NodeMailerTransport implements Transport {\n  name = 'sparkpost'\n  version = '1.0.0'\n\n  #config: SparkPostConfig\n\n  constructor(config: SparkPostConfig) {\n    this.#config = config\n  }\n\n  /**\n   * Returns base url for sending emails\n   */\n  #getBaseUrl(): string {\n    return this.#config.baseUrl.replace(/\\/$/, '')\n  }\n\n  /**\n   * Formatting recipients for sparkpost API call\n   */\n  #formatRecipients(\n    recipients?: MailMessage['data']['to'] | MailMessage['data']['cc'] | MailMessage['data']['bcc']\n  ): { address: { name?: string; email: string } }[] {\n    if (!recipients) {\n      return []\n    }\n\n    /**\n     * Normalizing an array of recipients\n     */\n    if (Array.isArray(recipients)) {\n      return recipients.map((recipient) => {\n        if (typeof recipient === 'string') {\n          return {\n            address: { email: recipient },\n          }\n        }\n\n        return {\n          address: {\n            email: recipient.address,\n            ...(recipient.name ? { name: recipient.name } : {}),\n          },\n        }\n      })\n    }\n\n    /**\n     * Normalizing a string based recipient\n     */\n    if (typeof recipients === 'string') {\n      return [\n        {\n          address: { email: recipients },\n        },\n      ]\n    }\n\n    /**\n     * Normalizing an object based string\n     */\n    return [\n      {\n        address: {\n          email: recipients.address,\n          ...(recipients.name ? { name: recipients.name } : {}),\n        },\n      },\n    ]\n  }\n\n  /**\n   * Returns an array of recipients accepted by the SparkPost API\n   */\n  #getRecipients(mail: MailMessage): { address: { name?: string; email: string } }[] {\n    return this.#formatRecipients(mail.data.to)\n      .concat(this.#formatRecipients(mail.data.cc))\n      .concat(this.#formatRecipients(mail.data.bcc))\n  }\n\n  /**\n   * Returns an object of options accepted by the sparkpost mail API\n   */\n  #getOptions(config: SparkPostConfig) {\n    const options = new ObjectBuilder<Record<string, any>>({})\n\n    options.add('start_time', config.startTime)\n    options.add('initial_open', config.initialOpen)\n    options.add('open_tracking', config.openTracking)\n    options.add('click_tracking', config.clickTracking)\n    options.add('transactional', config.transactional)\n    options.add('sandbox', config.sandbox)\n    options.add('skip_suppression', config.skipSuppression)\n    options.add('ip_pool', config.ipPool)\n\n    return options.toObject()\n  }\n\n  /**\n   * Send email\n   */\n  async send(\n    mail: MailMessage,\n    callback: (err: Error | null, info: SparkPostSentMessageInfo) => void\n  ) {\n    const url = `${this.#getBaseUrl()}/transmissions`\n    const options = this.#getOptions(this.#config)\n    const envelope = mail.message.getEnvelope()\n    const recipients = this.#getRecipients(mail)\n\n    debug('sparkpost mail url \"%s\"', url)\n    debug('sparkpost mail options %O', options)\n    debug('sparkpost mail envelope %O', envelope)\n    debug('sparkpost mail recipients %O', recipients)\n\n    try {\n      /**\n       * The sparkpost API doesn't accept the multipart stream and hence we\n       * need to convert the stream to a string\n       */\n      const mimeMessage = await text(mail.message.createReadStream())\n      const response = await got.post<{\n        results: Omit<SparkPostSentMessageInfo, 'messageId' | 'envelope'>\n      }>(url, {\n        json: {\n          options,\n          recipients,\n          content: { email_rfc822: mimeMessage },\n        },\n        responseType: 'json',\n        headers: { Authorization: this.#config.key },\n      })\n\n      const sparkPostMessageId = response.body.results.id\n      const messageId = sparkPostMessageId\n        ? sparkPostMessageId.replace(/^<|>$/g, '')\n        : mail.message.messageId()\n\n      callback(null, { messageId, envelope, ...response.body.results })\n    } catch (error) {\n      callback(\n        new E_MAIL_TRANSPORT_ERROR('Unable to send email using the sparkpost transport', {\n          cause: error,\n        }),\n        undefined as any\n      )\n    }\n  }\n}\n\n/**\n * AdonisJS mail transport implementation to send emails\n * using Sparkpost's `/message.mime` API endpoint.\n */\nexport class SparkPostTransport implements MailTransportContract {\n  #config: SparkPostConfig\n\n  constructor(config: SparkPostConfig) {\n    this.#config = config\n  }\n\n  /**\n   * Send message\n   */\n  async send(\n    message: NodeMailerMessage,\n    config?: SparkPostRuntimeConfig\n  ): Promise<MailResponse<SparkPostSentMessageInfo>> {\n    const nodemailerTransport = new NodeMailerTransport({ ...this.#config, ...config })\n    const transporter = createTransport<SparkPostSentMessageInfo>(nodemailerTransport)\n\n    const sparkPostResponse = await transporter.sendMail(message)\n    return new MailResponse(\n      sparkPostResponse.messageId,\n      sparkPostResponse.envelope,\n      sparkPostResponse\n    )\n  }\n}\n"],"mappings":"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","names":["got","text","ObjectBuilder","createTransport","NodeMailerTransport","name","version","constructor","config","baseUrl","replace","recipients","Array","isArray","map","recipient","address","email","mail","data","to","concat","cc","bcc","options","ObjectBuilder","add","startTime","initialOpen","openTracking","clickTracking","transactional","sandbox","skipSuppression","ipPool","toObject","send","callback","url","envelope","message","getEnvelope","debug","mimeMessage","text","createReadStream","response","got","post","json","content","email_rfc822","responseType","headers","Authorization","key","sparkPostMessageId","body","results","id","messageId","error","E_MAIL_TRANSPORT_ERROR","cause","undefined","SparkPostTransport","nodemailerTransport","transporter","createTransport","sparkPostResponse","sendMail","MailResponse"]}