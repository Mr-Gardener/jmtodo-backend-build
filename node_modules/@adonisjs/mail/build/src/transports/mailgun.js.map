{"version":3,"sources":["../../../src/transports/mailgun.ts","../../../src/utils.ts"],"sourcesContent":["/*\n * @adonisjs/mail\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport got from 'got'\nimport { FormData, File } from 'formdata-node'\nimport { ObjectBuilder } from '@poppinss/utils'\nimport { type Transport, createTransport } from 'nodemailer'\nimport MailMessage from 'nodemailer/lib/mailer/mail-message.js'\n\nimport debug from '../debug.js'\nimport { streamToBlob } from '../utils.js'\nimport { MailResponse } from '../mail_response.js'\nimport { E_MAIL_TRANSPORT_ERROR } from '../errors.js'\nimport type {\n  MailgunConfig,\n  NodeMailerMessage,\n  MailTransportContract,\n  MailgunRuntimeConfig,\n  MailgunSentMessageInfo,\n} from '../types.js'\n\n/**\n * Transport for nodemailer\n */\nclass NodeMailerTransport implements Transport<MailgunSentMessageInfo> {\n  name = 'mailgun'\n  version = '1.0.0'\n\n  #config: MailgunConfig\n\n  constructor(config: MailgunConfig) {\n    this.#config = config\n  }\n\n  /**\n   * Converts a boolean flag to a yes/no string.\n   */\n  #flagToYesNo(value?: boolean) {\n    if (value === undefined) {\n      return\n    }\n\n    return value === true ? 'yes' : 'no'\n  }\n\n  /**\n   * Returns pre-configured otags\n   */\n  #getOTags(config: MailgunConfig) {\n    const tags = new ObjectBuilder<Record<string, string>>({})\n\n    tags.add('o:tag', config.oTags)\n    tags.add('o:dkim', this.#flagToYesNo(config.oDkim))\n    tags.add('o:testmode', this.#flagToYesNo(config.oTestMode))\n    tags.add('o:tracking', this.#flagToYesNo(config.oTracking))\n    tags.add('o:tracking-clicks', this.#flagToYesNo(config.oTrackingClick))\n    tags.add('o:tracking-opens', this.#flagToYesNo(config.oTrackingOpens))\n\n    return tags.toObject()\n  }\n\n  /**\n   * Returns base url for sending emails\n   */\n  #getBaseUrl(): string {\n    return this.#config.domain\n      ? `${this.#config.baseUrl.replace(/\\/$/, '')}/${this.#config.domain}`\n      : this.#config.baseUrl.replace(/\\/$/, '')\n  }\n\n  /**\n   * Returns an object of custom headers\n   */\n  #getHeaders(config: MailgunConfig) {\n    const headers = config.headers || {}\n    return Object.keys(headers).reduce<Record<string, string>>((result, key) => {\n      result[`h:${key}`] = headers[key]\n      return result\n    }, {})\n  }\n\n  /**\n   * Returns an object of custom variables\n   */\n  #getVariables(config: MailgunConfig) {\n    const variables = config.variables || {}\n    return Object.keys(variables).reduce<Record<string, string>>((result, key) => {\n      result[`v:${key}`] = variables[key]\n      return result\n    }, {})\n  }\n\n  /**\n   * Formats an array of recipients to a string accepted by mailgun\n   */\n  #formatRecipients(\n    recipients?: MailMessage['data']['to'] | MailMessage['data']['cc'] | MailMessage['data']['bcc']\n  ): string | undefined {\n    if (!recipients) {\n      return\n    }\n\n    if (typeof recipients === 'string') {\n      return recipients\n    }\n\n    if (Array.isArray(recipients)) {\n      return recipients\n        .map((recipient) => {\n          if (typeof recipient === 'string') {\n            return recipient\n          }\n          return `${recipient.name} <${recipient.address}>`\n        })\n        .join(',')\n    }\n\n    return `${recipients.name} <${recipients.address}>`\n  }\n\n  /**\n   * Returns an object of `to`, `cc` and `bcc`\n   */\n  #getRecipients(mail: MailMessage) {\n    const recipients = new ObjectBuilder<Record<string, string>>({})\n\n    recipients.add('to', this.#formatRecipients(mail.data.to))\n    recipients.add('cc', this.#formatRecipients(mail.data.cc))\n    recipients.add('bcc', this.#formatRecipients(mail.data.bcc))\n    return recipients.toObject()\n  }\n\n  /**\n   * If we call formData.append('to', ['a', 'b', 'c']), it will\n   * create a single key-value pair with key 'to' and value 'a,b,c'\n   *\n   * This method will append each value separately\n   */\n  #appendValue(form: FormData, key: string, value: any) {\n    if (Array.isArray(value)) {\n      value.forEach((item) => form.append(key, item))\n    } else {\n      form.append(key, value)\n    }\n  }\n\n  /**\n   * Create FormData object to send to Mailgun\n   */\n  async #createFormData(mail: MailMessage) {\n    const tags = this.#getOTags(this.#config)\n    const headers = this.#getHeaders(this.#config)\n    const variables = this.#getVariables(this.#config)\n    const recipients = this.#getRecipients(mail)\n    const mimeMessage = await streamToBlob(mail.message.createReadStream(), 'message/rfc822')\n    const mime = new File([mimeMessage], 'messages.mime')\n\n    debug('mailgun mail mime %O', mimeMessage)\n    debug('mailgun mail tags %O', tags)\n    debug('mailgun mail headers %O', headers)\n    debug('mailgun mail variables %O', variables)\n    debug('mailgun mail recipients %O', recipients)\n\n    const form = new FormData()\n\n    form.append('message', mime, 'message.mime')\n    Object.keys(tags).forEach((key) => this.#appendValue(form, key, tags[key]))\n    Object.keys(headers).forEach((key) => this.#appendValue(form, key, headers[key]))\n    Object.keys(variables).forEach((key) => this.#appendValue(form, key, variables[key]))\n    Object.keys(recipients).forEach((key) => this.#appendValue(form, 'to', recipients[key]))\n\n    return form\n  }\n\n  /**\n   * Sends email using Mailgun's HTTP API\n   */\n  async send(\n    mail: MailMessage,\n    callback: (err: Error | null, info: MailgunSentMessageInfo) => void\n  ) {\n    const envelope = mail.message.getEnvelope()\n    const url = `${this.#getBaseUrl()}/messages.mime`\n    const form = await this.#createFormData(mail)\n\n    debug('mailgun mail url %s', url)\n    debug('mailgun mail envelope %s', envelope)\n\n    try {\n      const response = await got.post<{ id: string }>(url, {\n        body: form as any,\n        username: 'api',\n        password: this.#config.key,\n        responseType: 'json',\n      })\n\n      const mailgunMessageId = response.body.id\n      const messageId = mailgunMessageId\n        ? mailgunMessageId.replace(/^<|>$/g, '')\n        : mail.message.messageId()\n\n      callback(null, { id: mailgunMessageId, messageId, envelope })\n    } catch (error) {\n      callback(\n        new E_MAIL_TRANSPORT_ERROR('Unable to send email using the mailgun transport', {\n          cause: error,\n        }),\n        undefined as any\n      )\n    }\n  }\n}\n\n/**\n * AdonisJS Mail transport for sending emails using the\n * Mailgun's `/messages.mime` API endpoint.\n */\nexport class MailgunTransport implements MailTransportContract {\n  #config: MailgunConfig\n\n  constructor(config: MailgunConfig) {\n    this.#config = config\n  }\n\n  /**\n   * Sends message using the transport\n   */\n  async send(\n    message: NodeMailerMessage,\n    config?: MailgunRuntimeConfig\n  ): Promise<MailResponse<MailgunSentMessageInfo>> {\n    const mailgunTransport = new NodeMailerTransport({ ...this.#config, ...config })\n    const transporter = createTransport<MailgunSentMessageInfo>(mailgunTransport)\n\n    const mailgunResponse = await transporter.sendMail(message)\n    return new MailResponse(mailgunResponse.messageId, mailgunResponse.envelope, mailgunResponse)\n  }\n}\n","/*\n * @adonisjs/mail\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Convert a stream to a blob\n */\nexport function streamToBlob(stream: NodeJS.ReadableStream, mimeType: string) {\n  return new Promise<Blob>((resolve, reject) => {\n    const chunks: any = []\n\n    stream\n      .on('data', (chunk) => chunks.push(chunk))\n      .once('end', () => resolve(new Blob(chunks, { type: mimeType })))\n      .once('error', reject)\n  })\n}\n"],"mappings":"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","names":["got","FormData","File","ObjectBuilder","createTransport","streamToBlob","stream","mimeType","Promise","resolve","reject","chunks","on","chunk","push","once","Blob","type","NodeMailerTransport","name","version","constructor","config","value","undefined","tags","ObjectBuilder","add","oTags","oDkim","oTestMode","oTracking","oTrackingClick","oTrackingOpens","toObject","domain","baseUrl","replace","headers","Object","keys","reduce","result","key","variables","recipients","Array","isArray","map","recipient","address","join","mail","data","to","cc","bcc","form","forEach","item","append","mimeMessage","streamToBlob","message","createReadStream","mime","File","debug","FormData","send","callback","envelope","getEnvelope","url","response","got","post","body","username","password","responseType","mailgunMessageId","id","messageId","error","E_MAIL_TRANSPORT_ERROR","cause","MailgunTransport","mailgunTransport","transporter","createTransport","mailgunResponse","sendMail","MailResponse"]}