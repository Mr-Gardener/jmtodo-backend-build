{"version":3,"sources":["../../providers/mail_provider.ts"],"sourcesContent":["/*\n * @adonisjs/mail\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { configProvider } from '@adonisjs/core'\nimport { RuntimeException } from '@poppinss/utils'\nimport type { ApplicationService } from '@adonisjs/core/types'\n\nimport { MailManager, Mailer, Message } from '../index.js'\nimport type { MailEvents, MailService } from '../src/types.js'\n\n/**\n * Extended types\n */\ndeclare module '@adonisjs/core/types' {\n  export interface ContainerBindings {\n    'mail.manager': MailService\n  }\n  export interface EventsList extends MailEvents {}\n}\n\n/**\n * Mail provider to register mail manager with the container\n */\nexport default class MailProvider {\n  constructor(protected app: ApplicationService) {}\n\n  /**\n   * Defines the template engine on the message class to\n   * render templates\n   */\n  protected async defineTemplateEngine() {\n    if (this.app.usingEdgeJS) {\n      const edge = await import('edge.js')\n      Message.templateEngine = {\n        render(templatePath, helpers, data) {\n          return edge.default.share(helpers).render(templatePath, data)\n        },\n      }\n      const { mailPluginEdge } = await import('../src/plugins/edge.js')\n      edge.default.use(mailPluginEdge)\n    }\n  }\n\n  /**\n   * Registering bindings to container\n   */\n  register() {\n    this.app.container.singleton('mail.manager', async (resolver) => {\n      const emitter = await resolver.make('emitter')\n      const mailConfigProvider = await this.app.config.get('mail')\n      const config = await configProvider.resolve<any>(this.app, mailConfigProvider)\n\n      if (!config) {\n        throw new RuntimeException(\n          'Invalid \"config/mail.ts\" file. Make sure you are using the \"defineConfig\" method'\n        )\n      }\n\n      return new MailManager(emitter, config)\n    })\n\n    this.app.container.bind(Mailer, async (resolver) => {\n      const mailManager = await resolver.make('mail.manager')\n      return mailManager.use()\n    })\n  }\n\n  /**\n   * Invoked automatically when the app is booting\n   */\n  async boot() {\n    await this.defineTemplateEngine()\n  }\n\n  /**\n   * Cleanup hook\n   */\n  async shutdown() {\n    const mail = await this.app.container.make('mail.manager')\n    await mail.closeAll()\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AASA,SAASA,sBAAsB;AAC/B,SAASC,wBAAwB;AAmBjC,IAAqBC,eAArB,MAAqBA;EA7BrB,OA6BqBA;;;;EACnBC,YAAsBC,KAAyB;SAAzBA,MAAAA;EAA0B;;;;;EAMhD,MAAgBC,uBAAuB;AACrC,QAAI,KAAKD,IAAIE,aAAa;AACxB,YAAMC,OAAO,MAAM,OAAO,SAAA;AAC1BC,cAAQC,iBAAiB;QACvBC,OAAOC,cAAcC,SAASC,MAAI;AAChC,iBAAON,KAAKO,QAAQC,MAAMH,OAAAA,EAASF,OAAOC,cAAcE,IAAAA;QAC1D;MACF;AACA,YAAM,EAAEG,eAAc,IAAK,MAAM,OAAO,wBAAA;AACxCT,WAAKO,QAAQG,IAAID,cAAAA;IACnB;EACF;;;;EAKAE,WAAW;AACT,SAAKd,IAAIe,UAAUC,UAAU,gBAAgB,OAAOC,aAAAA;AAClD,YAAMC,UAAU,MAAMD,SAASE,KAAK,SAAA;AACpC,YAAMC,qBAAqB,MAAM,KAAKpB,IAAIqB,OAAOC,IAAI,MAAA;AACrD,YAAMD,SAAS,MAAME,eAAeC,QAAa,KAAKxB,KAAKoB,kBAAAA;AAE3D,UAAI,CAACC,QAAQ;AACX,cAAM,IAAII,iBACR,kFAAA;MAEJ;AAEA,aAAO,IAAIC,YAAYR,SAASG,MAAAA;IAClC,CAAA;AAEA,SAAKrB,IAAIe,UAAUY,KAAKC,QAAQ,OAAOX,aAAAA;AACrC,YAAMY,cAAc,MAAMZ,SAASE,KAAK,cAAA;AACxC,aAAOU,YAAYhB,IAAG;IACxB,CAAA;EACF;;;;EAKA,MAAMiB,OAAO;AACX,UAAM,KAAK7B,qBAAoB;EACjC;;;;EAKA,MAAM8B,WAAW;AACf,UAAMC,OAAO,MAAM,KAAKhC,IAAIe,UAAUI,KAAK,cAAA;AAC3C,UAAMa,KAAKC,SAAQ;EACrB;AACF;","names":["configProvider","RuntimeException","MailProvider","constructor","app","defineTemplateEngine","usingEdgeJS","edge","Message","templateEngine","render","templatePath","helpers","data","default","share","mailPluginEdge","use","register","container","singleton","resolver","emitter","make","mailConfigProvider","config","get","configProvider","resolve","RuntimeException","MailManager","bind","Mailer","mailManager","boot","shutdown","mail","closeAll"]}