import {
  stubsRoot
} from "../chunk-ASVKPASJ.js";
import {
  __name
} from "../chunk-XE4OXN2W.js";

// commands/make_mail.ts
import { BaseCommand, args, flags } from "@adonisjs/core/ace";
function _ts_decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
__name(_ts_decorate, "_ts_decorate");
function _ts_metadata(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}
__name(_ts_metadata, "_ts_metadata");
var MakeMail = class extends BaseCommand {
  static {
    __name(this, "MakeMail");
  }
  static commandName = "make:mail";
  static description = "Make a new mail class";
  static options = {
    allowUnknownFlags: true
  };
  /**
  * Execute command
  */
  async run() {
    const codemods = await this.createCodemods();
    await codemods.makeUsingStub(stubsRoot, "make/mail/main.stub", {
      flags: this.parsed.flags,
      intent: this.intent || "notification",
      entity: this.app.generators.createEntity(this.name)
    });
  }
};
_ts_decorate([
  args.string({
    description: "Name of the mail file"
  }),
  _ts_metadata("design:type", String)
], MakeMail.prototype, "name", void 0);
_ts_decorate([
  flags.string({
    description: "The intent suffix for the mail"
  }),
  _ts_metadata("design:type", String)
], MakeMail.prototype, "intent", void 0);
export {
  MakeMail as default
};
//# sourceMappingURL=make_mail.js.map